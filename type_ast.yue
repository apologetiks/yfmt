types =
  * {
    type: "leaf"
    decl_name: "Num"
    internal_name: "num"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "Name"
    internal_name: "name"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Variable"
    internal_name: "variable"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "LabelName"
    internal_name: "label_name"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "LuaKeyword"
    internal_name: "lua_keyword"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "leaf"
    decl_name: "self"
    internal_name: "self"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "self_name"
    internal_name: "self_name"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "leaf"
    decl_name: "self_class"
    internal_name: "self_name"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "self_class_name"
    internal_name: "self_class_name"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "SelfName"
    internal_name: "self_item"
    attr:
      * { special: true, type: "sel", required: true, name: "name", any: { "self_class_name", "self_class", "self_name", "self" } }
  }
  * {
    type: "node"
    decl_name: "KeyName"
    internal_name: "key_name"
    attr:
      * { special: true, type: "sel", required: true, name: "name", any: { "SelfName", "Name" } }
  }
  * {
    type: "leaf"
    decl_name: "VarArg"
    internal_name: "var_arg"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "local_flag"
    internal_name: "local_flag"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "Seperator"
    internal_name: "seperator"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "NameList"
    internal_name: "name_list"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "list", required: true, name: "names", any: { "Variable" } }
  }
  * {
    type: "node"
    decl_name: "local_values"
    internal_name: "local_values"
    attr:
      * { type: "NameList", required: true, name: "nameList" }
      * { special: true, type: "sel", required: false, name: "valueList", any: { "TableBlock", "ExpListLow" } }
  }
  * {
    type: "node"
    decl_name: "Local"
    internal_name: "local"
    attr:
      * { special: true, type: "sel", required: true, name: "item", any: { "local_flag", "local_values" } }
  }
  * {
    type: "leaf"
    decl_name: "Attrib"
    internal_name: "attrib"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "LocalAttrib"
    internal_name: "local_attrib"
    attr:
      * { type: "Attrib", required: true, name: "attrib" }
      * { type: "NameList", required: true, name: "nameList" }
      * { type: "Assign", required: true, name: "assign" }
  }
  * {
    type: "node"
    decl_name: "colon_import_name"
    internal_name: "colon_import_name"
    attr:
      * { type: "Variable", required: true, name: "name" }
  }
  * {
    type: "leaf"
    decl_name: "import_literal_inner"
    internal_name: "import_literal_inner"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "ImportLiteral"
    internal_name: "import_literal"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: true, name: "inners", any: { "import_literal_inner" } }
  }
  * {
    type: "node"
    decl_name: "ImportFrom"
    internal_name: "import_from"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: true, name: "names", any: { "colon_import_name", "Variable" } }
      * { type: "Exp", required: true, name: "exp" }
  }
  * {
    type: "node"
    decl_name: "macro_name_pair"
    internal_name: "macro_name_pair"
    attr:
      * { type: "MacroName", required: true, name: "key" }
      * { type: "MacroName", required: true, name: "value" }
  }
  * {
    type: "leaf"
    decl_name: "import_all_macro"
    internal_name: "import_all_macro"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "ImportTabLit"
    internal_name: "import_tab_lit"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: false, name: "items", any: { "variable_pair", "normal_pair", "MacroName", "macro_name_pair", "import_all_macro", "Exp", "meta_variable_pair", "meta_normal_pair" } }
  }
  * {
    type: "node"
    decl_name: "ImportAs"
    internal_name: "import_as"
    attr:
      * { type: "ImportLiteral", required: true, name: "literal" }
      * { special: true, type: "sel", required: false, name: "target", any: { "Variable", "ImportTabLit", "import_all_macro" } }
  }
  * {
    type: "node"
    decl_name: "Import"
    internal_name: "import"
    attr:
      * { special: true, type: "sel", required: true, name: "content", any: { "ImportAs", "ImportFrom" } }
  }
  * {
    type: "node"
    decl_name: "Label"
    internal_name: "label"
    attr:
      * { type: "LabelName", required: true, name: "label" }
  }
  * {
    type: "node"
    decl_name: "Goto"
    internal_name: "goto"
    attr:
      * { type: "LabelName", required: true, name: "label" }
  }
  * {
    type: "leaf"
    decl_name: "fn_arrow_back"
    internal_name: "fn_arrow_back"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Backcall"
    internal_name: "backcall"
    attr:
      * { type: "FnArgsDef", required: false, name: "argsDef" }
      * { type: "fn_arrow_back", required: true, name: "arrow" }
      * { type: "ChainValue", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "ExpListLow"
    internal_name: "exp_list_low"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "list", required: true, name: "exprs", any: { "Exp" } }
  }
  * {
    type: "node"
    decl_name: "ExpList"
    internal_name: "exp_list"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "list", required: true, name: "exprs", any: { "Exp" } }
  }
  * {
    type: "node"
    decl_name: "Return"
    internal_name: "return"
    attr:
      * { special: true, type: "sel", required: false, name: "valueList", any: { "TableBlock", "ExpListLow" } }
  }
  * {
    type: "node"
    decl_name: "With"
    internal_name: "with"
    attr:
      * { type: "existential_op", required: false, name: "eop" }
      * { type: "ExpList", required: true, name: "valueList" }
      * { type: "Assign", required: false, name: "assigns" }
      * { special: true, type: "sel", required: true, name: "body", any: { "Block", "Statement" } }
  }
  * {
    type: "node"
    decl_name: "SwitchCase"
    internal_name: "switch_case"
    attr:
      * { type: "ExpList", required: true, name: "valueList" }
      * { special: true, type: "sel", required: true, name: "body", any: { "Block", "Statement" } }
  }
  * {
    type: "node"
    decl_name: "Switch"
    internal_name: "switch"
    attr:
      * { type: "Exp", required: true, name: "target" }
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "list", required: true, name: "branches", any: { "SwitchCase" } }
      * { special: true, type: "sel", required: false, name: "lastBranch", any: { "Block", "Statement" } }
  }
  * {
    type: "node"
    decl_name: "assignment"
    internal_name: "assignment"
    attr:
      * { type: "ExpList", required: true, name: "expList" }
      * { type: "Assign", required: true, name: "assign" }
  }
  * {
    type: "node"
    decl_name: "IfCond"
    internal_name: "if_cond"
    attr:
      * { special: true, type: "sel", required: true, name: "condition", any: { "Exp", "assignment" } }
  }
  * {
    type: "leaf"
    decl_name: "IfType"
    internal_name: "if_type"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "If"
    internal_name: "if"
    attr:
      * { type: "IfType", required: true, name: "type" }
      * { special: true, type: "sel_list", required: true, name: "nodes", any: { "IfCond", "Block", "Statement" } }
  }
  * {
    type: "leaf"
    decl_name: "WhileType"
    internal_name: "while_type"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "While"
    internal_name: "while"
    attr:
      * { type: "WhileType", required: true, name: "type" }
      * { type: "Exp", required: true, name: "condition" }
      * { special: true, type: "sel", required: true, name: "body", any: { "Block", "Statement" } }
  }
  * {
    type: "node"
    decl_name: "Repeat"
    internal_name: "repeat"
    attr:
      * { type: "Body", required: true, name: "body" }
      * { type: "Exp", required: true, name: "condition" }
  }
  * {
    type: "node"
    decl_name: "for_step_value"
    internal_name: "for_step_value"
    attr:
      * { type: "Exp", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "For"
    internal_name: "for"
    attr:
      * { type: "Variable", required: true, name: "varName" }
      * { type: "Exp", required: true, name: "startValue" }
      * { type: "Exp", required: true, name: "stopValue" }
      * { type: "for_step_value", required: false, name: "stepValue" }
      * { special: true, type: "sel", required: true, name: "body", any: { "Block", "Statement" } }
  }
  * {
    type: "node"
    decl_name: "ForEach"
    internal_name: "for_each"
    attr:
      * { type: "AssignableNameList", required: true, name: "nameList" }
      * { special: true, type: "sel", required: true, name: "loopValue", any: { "star_exp", "ExpList" } }
      * { special: true, type: "sel", required: true, name: "body", any: { "Block", "Statement" } }
  }
  * {
    type: "node"
    decl_name: "Do"
    internal_name: "do"
    attr:
      * { type: "Body", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "catch_block"
    internal_name: "catch_block"
    attr:
      * { type: "Variable", required: true, name: "err" }
      * { type: "Block", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "Try"
    internal_name: "try"
    attr:
      * { special: true, type: "sel", required: true, name: "func", any: { "Block", "Exp" } }
      * { type: "catch_block", required: false, name: "catchBlock" }
  }
  * {
    type: "node"
    decl_name: "Comprehension"
    internal_name: "comp"
    attr:
      * { special: true, type: "sel", required: true, name: "value", any: { "Exp", "Statement" } }
      * { type: "CompInner", required: true, name: "forLoop" }
  }
  * {
    type: "node"
    decl_name: "comp_value"
    internal_name: "comp_value"
    attr:
      * { type: "Exp", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "TblComprehension"
    internal_name: "tbl_comp"
    attr:
      * { type: "Exp", required: true, name: "key" }
      * { type: "comp_value", required: false, name: "value" }
      * { type: "CompInner", required: true, name: "forLoop" }
  }
  * {
    type: "node"
    decl_name: "star_exp"
    internal_name: "star_exp"
    attr:
      * { type: "Exp", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "CompForEach"
    internal_name: "comp_for_each"
    attr:
      * { type: "AssignableNameList", required: true, name: "nameList" }
      * { special: true, type: "sel", required: true, name: "loopValue", any: { "star_exp", "Exp" } }
  }
  * {
    type: "node"
    decl_name: "CompFor"
    internal_name: "comp_for"
    attr:
      * { type: "Variable", required: true, name: "varName" }
      * { type: "Exp", required: true, name: "startValue" }
      * { type: "Exp", required: true, name: "stopValue" }
      * { type: "for_step_value", required: false, name: "stepValue" }
  }
  * {
    type: "node"
    decl_name: "CompInner"
    internal_name: "comp_inner"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: true, name: "items", any: { "CompFor", "CompForEach", "Exp" } }
  }
  * {
    type: "node"
    decl_name: "Assign"
    internal_name: "assign"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: true, name: "values", any: { "With", "If", "Switch", "TableBlock", "Exp" } }
  }
  * {
    type: "leaf"
    decl_name: "update_op"
    internal_name: "update_op"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Update"
    internal_name: "update"
    attr:
      * { type: "update_op", required: true, name: "op" }
      * { type: "Exp", required: true, name: "value" }
  }
  * {
    type: "leaf"
    decl_name: "BinaryOperator"
    internal_name: "binary_op"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "unary_operator"
    internal_name: "unary_op"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Assignable"
    internal_name: "assignable"
    attr:
      * { special: true, type: "sel", required: true, name: "item", any: { "AssignableChain", "Variable", "SelfName" } }
  }
  * {
    type: "node"
    decl_name: "exp_op_value"
    internal_name: "exp_op_value"
    attr:
      * { type: "BinaryOperator", required: true, name: "op" }
      * { special: true, type: "list", required: true, name: "pipeExprs", any: { "unary_exp" } }
  }
  * {
    type: "node"
    decl_name: "Exp"
    internal_name: "exp"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "list", required: true, name: "pipeExprs", any: { "unary_exp" } }
      * { special: true, type: "list", required: false, name: "opValues", any: { "exp_op_value" } }
      * { type: "Exp", required: false, name: "nilCoalesed" }
  }
  * {
    type: "node"
    decl_name: "Callable"
    internal_name: "callable"
    attr:
      * { special: true, type: "sel", required: true, name: "item", any: { "Variable", "SelfName", "VarArg", "Parens", "MacroName" } }
  }
  * {
    type: "node"
    decl_name: "variable_pair"
    internal_name: "variable_pair"
    attr:
      * { type: "Variable", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "normal_pair"
    internal_name: "normal_pair"
    attr:
      * { special: true, type: "sel", required: true, name: "key", any: { "KeyName", "Exp", "DoubleString", "SingleString", "LuaString" } }
      * { special: true, type: "sel", required: true, name: "value", any: { "Exp", "TableBlock" } }
  }
  * {
    type: "node"
    decl_name: "default_pair"
    internal_name: "default_pair"
    attr:
      * { special: true, type: "sel", required: true, name: "key", any: { "Variable", "KeyName", "Exp" } }
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "Exp", required: false, name: "value" }
      * { type: "Exp", required: true, name: "defVal" }
  }
  * {
    type: "node"
    decl_name: "meta_variable_pair"
    internal_name: "meta_variable_pair"
    attr:
      * { type: "Variable", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "meta_normal_pair"
    internal_name: "meta_normal_pair"
    attr:
      * { special: true, type: "sel", required: false, name: "key", any: { "Name", "Exp" } }
      * { special: true, type: "sel", required: true, name: "value", any: { "Exp", "TableBlock" } }
  }
  * {
    type: "node"
    decl_name: "meta_default_pair"
    internal_name: "meta_default_pair"
    attr:
      * { special: true, type: "sel", required: false, name: "key", any: { "Variable", "Name" } }
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "Exp", required: false, name: "value" }
      * { type: "Exp", required: true, name: "defVal" }
  }
  * {
    type: "node"
    decl_name: "simple_table"
    internal_name: "simple_table"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: true, name: "pairs", any: { "variable_pair", "normal_pair", "meta_variable_pair", "meta_normal_pair" } }
  }
  * {
    type: "node"
    decl_name: "SimpleValue"
    internal_name: "simple_value"
    attr:
      * { special: true, type: "sel", required: true, name: "value", any: { "If", "Switch", "With", "ClassDecl", "ForEach", "For", "While", "Do", "Try", "unary_value", "TblComprehension", "TableLit", "Comprehension", "FunLit", "Num" } }
  }
  * {
    type: "leaf"
    decl_name: "LuaStringOpen"
    internal_name: "lua_string_open"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "LuaStringContent"
    internal_name: "lua_string_content"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "LuaStringClose"
    internal_name: "lua_string_close"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "LuaString"
    internal_name: "lua_string"
    attr:
      * { type: "LuaStringOpen", required: true, name: "open" }
      * { type: "LuaStringContent", required: true, name: "content" }
      * { type: "LuaStringClose", required: true, name: "close" }
  }
  * {
    type: "leaf"
    decl_name: "SingleString"
    internal_name: "single_string"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "double_string_inner"
    internal_name: "double_string_inner"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "double_string_content"
    internal_name: "double_string_content"
    attr:
      * { special: true, type: "sel", required: true, name: "content", any: { "double_string_inner", "Exp" } }
  }
  * {
    type: "node"
    decl_name: "DoubleString"
    internal_name: "double_string"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "list", required: false, name: "segments", any: { "double_string_content" } }
  }
  * {
    type: "node"
    decl_name: "String"
    internal_name: "string"
    attr:
      * { special: true, type: "sel", required: true, name: "str", any: { "DoubleString", "SingleString", "LuaString" } }
  }
  * {
    type: "leaf"
    decl_name: "Metatable"
    internal_name: "metatable"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Metamethod"
    internal_name: "metamethod"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "DotChainItem"
    internal_name: "dot_chain_item"
    attr:
      * { special: true, type: "sel", required: true, name: "name", any: { "Name", "Metatable", "Metamethod" } }
  }
  * {
    type: "node"
    decl_name: "ColonChainItem"
    internal_name: "colon_chain_item"
    attr:
      * { special: true, type: "sel", required: true, name: "name", any: { "LuaKeyword", "Name", "Metamethod" } }
  }
  * {
    type: "node"
    decl_name: "Slice"
    internal_name: "slice"
    attr:
      * { special: true, type: "sel", required: true, name: "startValue", any: { "Exp", "default_value" } }
      * { special: true, type: "sel", required: true, name: "stopValue", any: { "Exp", "default_value" } }
      * { special: true, type: "sel", required: true, name: "stepValue", any: { "Exp", "default_value" } }
  }
  * {
    type: "node"
    decl_name: "Parens"
    internal_name: "parens"
    attr:
      * { type: "Exp", required: true, name: "expr" }
  }
  * {
    type: "node"
    decl_name: "Invoke"
    internal_name: "invoke"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: false, name: "args", any: { "Exp", "SingleString", "DoubleString", "LuaString", "TableLit" } }
  }
  * {
    type: "leaf"
    decl_name: "existential_op"
    internal_name: "existential_op"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "table_appending_op"
    internal_name: "table_appending_op"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "ChainValue"
    internal_name: "chain_value"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: true, name: "items", any: { "Callable", "Invoke", "DotChainItem", "ColonChainItem", "Slice", "Exp", "String", "InvokeArgs", "existential_op", "table_appending_op" } }
  }
  * {
    type: "node"
    decl_name: "AssignableChain"
    internal_name: "assignable_chain"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: true, name: "items", any: { "Callable", "Invoke", "DotChainItem", "ColonChainItem", "Exp", "String" } }
  }
  * {
    type: "node"
    decl_name: "Value"
    internal_name: "value"
    attr:
      * { special: true, type: "sel", required: true, name: "item", any: { "SimpleValue", "simple_table", "ChainValue", "String" } }
  }
  * {
    type: "leaf"
    decl_name: "default_value"
    internal_name: "default_value"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "SpreadExp"
    internal_name: "spread_exp"
    attr:
      * { type: "Exp", required: true, name: "exp" }
  }
  * {
    type: "node"
    decl_name: "TableLit"
    internal_name: "table_lit"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: false, name: "values", any: { "variable_pair", "normal_pair", "SpreadExp", "Exp", "default_pair", "meta_variable_pair", "meta_normal_pair", "meta_default_pair" } }
  }
  * {
    type: "node"
    decl_name: "TableBlockIndent"
    internal_name: "table_block_indent"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: false, name: "values", any: { "variable_pair", "normal_pair", "TableBlockIndent", "default_pair", "meta_variable_pair", "meta_normal_pair", "meta_default_pair" } }
  }
  * {
    type: "node"
    decl_name: "TableBlock"
    internal_name: "table_block"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: false, name: "values", any: { "variable_pair", "normal_pair", "TableBlockIndent", "Exp", "TableBlock", "SpreadExp", "default_pair" } }
  }
  * {
    type: "node"
    decl_name: "class_member_list"
    internal_name: "class_member_list"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: true, name: "values", any: { "variable_pair", "normal_pair" } }
  }
  * {
    type: "node"
    decl_name: "ClassBlock"
    internal_name: "class_block"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: true, name: "contents", any: { "class_member_list", "Statement" } }
  }
  * {
    type: "node"
    decl_name: "ClassDecl"
    internal_name: "class_decl"
    attr:
      * { type: "Assignable", required: false, name: "name" }
      * { type: "Exp", required: false, name: "extend" }
      * { type: "ExpList", required: false, name: "mixes" }
      * { type: "ClassBlock", required: false, name: "body" }
  }
  * {
    type: "node"
    decl_name: "global_values"
    internal_name: "global_values"
    attr:
      * { type: "NameList", required: true, name: "nameList" }
      * { special: true, type: "sel", required: false, name: "valueList", any: { "TableBlock", "ExpListLow" } }
  }
  * {
    type: "leaf"
    decl_name: "global_op"
    internal_name: "global_op"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Global"
    internal_name: "global"
    attr:
      * { special: true, type: "sel", required: true, name: "item", any: { "ClassDecl", "global_op", "global_values" } }
  }
  * {
    type: "leaf"
    decl_name: "export_default"
    internal_name: "export_default"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Export"
    internal_name: "export"
    attr:
      * { type: "export_default", required: false, name: "def" }
      * { special: true, type: "sel", required: true, name: "target", any: { "ExpList", "Exp", "Macro" } }
      * { type: "Assign", required: false, name: "assign" }
  }
  * {
    type: "node"
    decl_name: "FnArgDef"
    internal_name: "fn_arg_def"
    attr:
      * { special: true, type: "sel", required: true, name: "name", any: { "Variable", "SelfName" } }
      * { type: "existential_op", required: false, name: "op" }
      * { type: "Exp", required: false, name: "defaultValue" }
  }
  * {
    type: "node"
    decl_name: "FnArgDefList"
    internal_name: "fn_arg_def_list"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "list", required: false, name: "definitions", any: { "FnArgDef" } }
      * { type: "VarArg", required: false, name: "varArg" }
  }
  * {
    type: "node"
    decl_name: "outer_var_shadow"
    internal_name: "outer_var_shadow"
    attr:
      * { type: "NameList", required: false, name: "varList" }
  }
  * {
    type: "node"
    decl_name: "FnArgsDef"
    internal_name: "fn_args_def"
    attr:
      * { type: "FnArgDefList", required: false, name: "defList" }
      * { type: "outer_var_shadow", required: false, name: "shadowOption" }
  }
  * {
    type: "leaf"
    decl_name: "fn_arrow"
    internal_name: "fn_arrow"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "FunLit"
    internal_name: "fun_lit"
    attr:
      * { type: "FnArgsDef", required: false, name: "argsDef" }
      * { type: "fn_arrow", required: true, name: "arrow" }
      * { type: "Body", required: false, name: "body" }
  }
  * {
    type: "node"
    decl_name: "MacroName"
    internal_name: "macro_name"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "MacroLit"
    internal_name: "macro_lit"
    attr:
      * { type: "FnArgDefList", required: false, name: "argsDef" }
      * { type: "Body", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "MacroInPlace"
    internal_name: "macro_in_place"
    attr:
      * { type: "Body", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "Macro"
    internal_name: "macro"
    attr:
      * { type: "Name", required: true, name: "name" }
      * { type: "MacroLit", required: true, name: "macroLit" }
  }
  * {
    type: "node"
    decl_name: "NameOrDestructure"
    internal_name: "name_or_des"
    attr:
      * { special: true, type: "sel", required: true, name: "item", any: { "Variable", "TableLit" } }
  }
  * {
    type: "node"
    decl_name: "AssignableNameList"
    internal_name: "assignable_name_list"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "list", required: true, name: "items", any: { "NameOrDestructure" } }
  }
  * {
    type: "node"
    decl_name: "InvokeArgs"
    internal_name: "invoke_args"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "sel_list", required: true, name: "args", any: { "Exp", "TableBlock" } }
  }
  * {
    type: "leaf"
    decl_name: "const_value"
    internal_name: "const_value"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "unary_value"
    internal_name: "unary_value"
    attr:
      * { special: true, type: "list", required: true, name: "ops", any: { "unary_operator" } }
      * { type: "Value", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "unary_exp"
    internal_name: "unary_exp"
    attr:
      * { special: true, type: "list", required: false, name: "ops", any: { "unary_operator" } }
      * { special: true, type: "list", required: true, name: "expos", any: { "Value" } }
  }
  * {
    type: "node"
    decl_name: "ExpListAssign"
    internal_name: "exp_list_assign"
    attr:
      * { type: "ExpList", required: true, name: "expList" }
      * { special: true, type: "sel", required: false, name: "action", any: { "Update", "Assign" } }
  }
  * {
    type: "node"
    decl_name: "if_line"
    internal_name: "if_line"
    attr:
      * { type: "IfType", required: true, name: "type" }
      * { type: "IfCond", required: true, name: "condition" }
  }
  * {
    type: "leaf"
    decl_name: "BreakLoop"
    internal_name: "break_loop"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "PipeBody"
    internal_name: "pipe_body"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "list", required: true, name: "values", any: { "unary_exp" } }
  }
  * {
    type: "node"
    decl_name: "statement_appendix"
    internal_name: "statement_appendix"
    attr:
      * { special: true, type: "sel", required: true, name: "item", any: { "if_line", "CompInner" } }
  }
  * {
    type: "leaf"
    decl_name: "statement_sep"
    internal_name: "statement_sep"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Statement"
    internal_name: "statement"
    attr:
      * { special: true, type: "sel", required: true, name: "content", any: { "Import", "While", "Repeat", "For", "ForEach", "Return", "Local", "Global", "Export", "Macro", "MacroInPlace", "BreakLoop", "Label", "Goto", "Backcall", "LocalAttrib", "PipeBody", "ExpListAssign" } }
      * { type: "statement_appendix", required: false, name: "appendix" }
      * { type: "statement_sep", required: false, name: "needSep" }
  }
  * {
    type: "node"
    decl_name: "Body"
    internal_name: "body"
    attr:
      * { special: true, type: "sel", required: true, name: "content", any: { "Block", "Statement" } }
  }
  * {
    type: "node"
    decl_name: "Block"
    internal_name: "block"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { special: true, type: "list", required: false, name: "statements", any: { "Statement" } }
  }
  * {
    type: "node"
    decl_name: "BlockEnd"
    internal_name: "block_end"
    attr:
      * { type: "Block", required: true, name: "block" }
  }
  * {
    type: "node"
    decl_name: "File"
    internal_name: "file"
    attr:
      * { type: "Block", required: false, name: "block" }
  }

export default types
