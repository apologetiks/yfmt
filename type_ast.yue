types =
  * {
    type: "leaf"
    decl_name: "Num"
    pretty_name: "num"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "Name"
    pretty_name: "name"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Variable"
    pretty_name: "variable"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "LabelName"
    pretty_name: "label_name"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "LuaKeyword"
    pretty_name: "lua_keyword"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "leaf"
    decl_name: "self"
    pretty_name: "self"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "self_name"
    pretty_name: "self_name"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "leaf"
    decl_name: "self_class"
    pretty_name: "self_name"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "self_class_name"
    pretty_name: "self_class_name"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "SelfName"
    pretty_name: "self_item"
    attr:
      * { type: "sel<true, self_class_name, self_class, self_name, self>", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "KeyName"
    pretty_name: "key_name"
    attr:
      * { type: "sel<true, SelfName, Name>", required: true, name: "name" }
  }
  * {
    type: "leaf"
    decl_name: "VarArg"
    pretty_name: "var_arg"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "local_flag"
    pretty_name: "local_flag"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "Seperator"
    pretty_name: "seperator"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "NameList"
    pretty_name: "name_list"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "list<true, Variable>", required: true, name: "names" }
  }
  * {
    type: "node"
    decl_name: "local_values"
    pretty_name: "local_values"
    attr:
      * { type: "NameList", required: true, name: "nameList" }
      * { type: "sel<false, TableBlock, ExpListLow>", required: false, name: "valueList" }
  }
  * {
    type: "node"
    decl_name: "Local"
    pretty_name: "local"
    attr:
      * { type: "sel<true, local_flag, local_values>", required: true, name: "item" }
  }
  * {
    type: "leaf"
    decl_name: "Attrib"
    pretty_name: "attrib"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "LocalAttrib"
    pretty_name: "local_attrib"
    attr:
      * { type: "Attrib", required: true, name: "attrib" }
      * { type: "NameList", required: true, name: "nameList" }
      * { type: "Assign", required: true, name: "assign" }
  }
  * {
    type: "node"
    decl_name: "colon_import_name"
    pretty_name: "colon_import_name"
    attr:
      * { type: "Variable", required: true, name: "name" }
  }
  * {
    type: "leaf"
    decl_name: "import_literal_inner"
    pretty_name: "import_literal_inner"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "ImportLiteral"
    pretty_name: "import_literal"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<true, import_literal_inner>", required: true, name: "inners" }
  }
  * {
    type: "node"
    decl_name: "ImportFrom"
    pretty_name: "import_from"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<true, colon_import_name, Variable>", required: true, name: "names" }
      * { type: "Exp", required: true, name: "exp" }
  }
  * {
    type: "node"
    decl_name: "macro_name_pair"
    pretty_name: "macro_name_pair"
    attr:
      * { type: "MacroName", required: true, name: "key" }
      * { type: "MacroName", required: true, name: "value" }
  }
  * {
    type: "leaf"
    decl_name: "import_all_macro"
    pretty_name: "import_all_macro"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "ImportTabLit"
    pretty_name: "import_tab_lit"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<false, variable_pair, normal_pair, MacroName, macro_name_pair, import_all_macro, Exp, meta_variable_pair, meta_normal_pair>", required: false, name: "items" }
  }
  * {
    type: "node"
    decl_name: "ImportAs"
    pretty_name: "import_as"
    attr:
      * { type: "ImportLiteral", required: true, name: "literal" }
      * { type: "sel<false, Variable, ImportTabLit, import_all_macro>", required: false, name: "target" }
  }
  * {
    type: "node"
    decl_name: "Import"
    pretty_name: "import"
    attr:
      * { type: "sel<true, ImportAs, ImportFrom>", required: true, name: "content" }
  }
  * {
    type: "node"
    decl_name: "Label"
    pretty_name: "label"
    attr:
      * { type: "LabelName", required: true, name: "label" }
  }
  * {
    type: "node"
    decl_name: "Goto"
    pretty_name: "goto"
    attr:
      * { type: "LabelName", required: true, name: "label" }
  }
  * {
    type: "leaf"
    decl_name: "fn_arrow_back"
    pretty_name: "fn_arrow_back"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Backcall"
    pretty_name: "backcall"
    attr:
      * { type: "FnArgsDef", required: false, name: "argsDef" }
      * { type: "fn_arrow_back", required: true, name: "arrow" }
      * { type: "ChainValue", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "ExpListLow"
    pretty_name: "exp_list_low"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "list<true, Exp>", required: true, name: "exprs" }
  }
  * {
    type: "node"
    decl_name: "ExpList"
    pretty_name: "exp_list"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "list<true, Exp>", required: true, name: "exprs" }
  }
  * {
    type: "node"
    decl_name: "Return"
    pretty_name: "return"
    attr:
      * { type: "sel<false, TableBlock, ExpListLow>", required: false, name: "valueList" }
  }
  * {
    type: "node"
    decl_name: "With"
    pretty_name: "with"
    attr:
      * { type: "existential_op", required: false, name: "eop" }
      * { type: "ExpList", required: true, name: "valueList" }
      * { type: "Assign", required: false, name: "assigns" }
      * { type: "sel<true, Block, Statement>", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "SwitchCase"
    pretty_name: "switch_case"
    attr:
      * { type: "ExpList", required: true, name: "valueList" }
      * { type: "sel<true, Block, Statement>", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "Switch"
    pretty_name: "switch"
    attr:
      * { type: "Exp", required: true, name: "target" }
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "list<true, SwitchCase>", required: true, name: "branches" }
      * { type: "sel<false, Block, Statement>", required: false, name: "lastBranch" }
  }
  * {
    type: "node"
    decl_name: "assignment"
    pretty_name: "assignment"
    attr:
      * { type: "ExpList", required: true, name: "expList" }
      * { type: "Assign", required: true, name: "assign" }
  }
  * {
    type: "node"
    decl_name: "IfCond"
    pretty_name: "if_cond"
    attr:
      * { type: "sel<true, Exp, assignment>", required: true, name: "condition" }
  }
  * {
    type: "leaf"
    decl_name: "IfType"
    pretty_name: "if_type"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "If"
    pretty_name: "if"
    attr:
      * { type: "IfType", required: true, name: "type" }
      * { type: "sel_list<true, IfCond, Block, Statement>", required: true, name: "nodes" }
  }
  * {
    type: "leaf"
    decl_name: "WhileType"
    pretty_name: "while_type"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "While"
    pretty_name: "while"
    attr:
      * { type: "WhileType", required: true, name: "type" }
      * { type: "Exp", required: true, name: "condition" }
      * { type: "sel<true, Block, Statement>", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "Repeat"
    pretty_name: "repeat"
    attr:
      * { type: "Body", required: true, name: "body" }
      * { type: "Exp", required: true, name: "condition" }
  }
  * {
    type: "node"
    decl_name: "for_step_value"
    pretty_name: "for_step_value"
    attr:
      * { type: "Exp", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "For"
    pretty_name: "for"
    attr:
      * { type: "Variable", required: true, name: "varName" }
      * { type: "Exp", required: true, name: "startValue" }
      * { type: "Exp", required: true, name: "stopValue" }
      * { type: "for_step_value", required: false, name: "stepValue" }
      * { type: "sel<true, Block, Statement>", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "ForEach"
    pretty_name: "for_each"
    attr:
      * { type: "AssignableNameList", required: true, name: "nameList" }
      * { type: "sel<true, star_exp, ExpList>", required: true, name: "loopValue" }
      * { type: "sel<true, Block, Statement>", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "Do"
    pretty_name: "do"
    attr:
      * { type: "Body", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "catch_block"
    pretty_name: "catch_block"
    attr:
      * { type: "Variable", required: true, name: "err" }
      * { type: "Block", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "Try"
    pretty_name: "try"
    attr:
      * { type: "sel<true, Block, Exp>", required: true, name: "func" }
      * { type: "catch_block", required: false, name: "catchBlock" }
  }
  * {
    type: "node"
    decl_name: "Comprehension"
    pretty_name: "comp"
    attr:
      * { type: "sel<true, Exp, Statement>", required: true, name: "value" }
      * { type: "CompInner", required: true, name: "forLoop" }
  }
  * {
    type: "node"
    decl_name: "comp_value"
    pretty_name: "comp_value"
    attr:
      * { type: "Exp", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "TblComprehension"
    pretty_name: "tbl_comp"
    attr:
      * { type: "Exp", required: true, name: "key" }
      * { type: "comp_value", required: false, name: "value" }
      * { type: "CompInner", required: true, name: "forLoop" }
  }
  * {
    type: "node"
    decl_name: "star_exp"
    pretty_name: "star_exp"
    attr:
      * { type: "Exp", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "CompForEach"
    pretty_name: "comp_for_each"
    attr:
      * { type: "AssignableNameList", required: true, name: "nameList" }
      * { type: "sel<true, star_exp, Exp>", required: true, name: "loopValue" }
  }
  * {
    type: "node"
    decl_name: "CompFor"
    pretty_name: "comp_for"
    attr:
      * { type: "Variable", required: true, name: "varName" }
      * { type: "Exp", required: true, name: "startValue" }
      * { type: "Exp", required: true, name: "stopValue" }
      * { type: "for_step_value", required: false, name: "stepValue" }
  }
  * {
    type: "node"
    decl_name: "CompInner"
    pretty_name: "comp_inner"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<true, CompFor, CompForEach, Exp>", required: true, name: "items" }
  }
  * {
    type: "node"
    decl_name: "Assign"
    pretty_name: "assign"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<true, With, If, Switch, TableBlock, Exp>", required: true, name: "values" }
  }
  * {
    type: "leaf"
    decl_name: "update_op"
    pretty_name: "update_op"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Update"
    pretty_name: "update"
    attr:
      * { type: "update_op", required: true, name: "op" }
      * { type: "Exp", required: true, name: "value" }
  }
  * {
    type: "leaf"
    decl_name: "BinaryOperator"
    pretty_name: "binary_op"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "unary_operator"
    pretty_name: "unary_op"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Assignable"
    pretty_name: "assignable"
    attr:
      * { type: "sel<true, AssignableChain, Variable, SelfName>", required: true, name: "item" }
  }
  * {
    type: "node"
    decl_name: "exp_op_value"
    pretty_name: "exp_op_value"
    attr:
      * { type: "BinaryOperator", required: true, name: "op" }
      * { type: "list<true, unary_exp>", required: true, name: "pipeExprs" }
  }
  * {
    type: "node"
    decl_name: "Exp"
    pretty_name: "exp"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "list<true, unary_exp>", required: true, name: "pipeExprs" }
      * { type: "list<false, exp_op_value>", required: false, name: "opValues" }
      * { type: "Exp", required: false, name: "nilCoalesed" }
  }
  * {
    type: "node"
    decl_name: "Callable"
    pretty_name: "callable"
    attr:
      * { type: "sel<true, Variable, SelfName, VarArg, Parens, MacroName>", required: true, name: "item" }
  }
  * {
    type: "node"
    decl_name: "variable_pair"
    pretty_name: "variable_pair"
    attr:
      * { type: "Variable", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "normal_pair"
    pretty_name: "normal_pair"
    attr:
      * { type: "sel<true, KeyName, Exp, DoubleString, SingleString, LuaString>", required: true, name: "key" }
      * { type: "sel<true, Exp, TableBlock>", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "default_pair"
    pretty_name: "default_pair"
    attr:
      * { type: "sel<true, Variable, KeyName, Exp>", required: true, name: "key" }
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "Exp", required: false, name: "value" }
      * { type: "Exp", required: true, name: "defVal" }
  }
  * {
    type: "node"
    decl_name: "meta_variable_pair"
    pretty_name: "meta_variable_pair"
    attr:
      * { type: "Variable", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "meta_normal_pair"
    pretty_name: "meta_normal_pair"
    attr:
      * { type: "sel<false, Name, Exp>", required: false, name: "key" }
      * { type: "sel<true, Exp, TableBlock>", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "meta_default_pair"
    pretty_name: "meta_default_pair"
    attr:
      * { type: "sel<false, Variable, Name>", required: false, name: "key" }
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "Exp", required: false, name: "value" }
      * { type: "Exp", required: true, name: "defVal" }
  }
  * {
    type: "node"
    decl_name: "simple_table"
    pretty_name: "simple_table"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<true, variable_pair, normal_pair, meta_variable_pair, meta_normal_pair>", required: true, name: "pairs" }
  }
  * {
    type: "node"
    decl_name: "SimpleValue"
    pretty_name: "simple_value"
    attr:
      * { type: "sel<true, If, Switch, With, ClassDecl, ForEach, For, While, Do, Try, unary_value, TblComprehension, TableLit, Comprehension, FunLit, Num>", required: true, name: "value" }
  }
  * {
    type: "leaf"
    decl_name: "LuaStringOpen"
    pretty_name: "lua_string_open"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "LuaStringContent"
    pretty_name: "lua_string_content"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "LuaStringClose"
    pretty_name: "lua_string_close"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "LuaString"
    pretty_name: "lua_string"
    attr:
      * { type: "LuaStringOpen", required: true, name: "open" }
      * { type: "LuaStringContent", required: true, name: "content" }
      * { type: "LuaStringClose", required: true, name: "close" }
  }
  * {
    type: "leaf"
    decl_name: "SingleString"
    pretty_name: "single_string"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "double_string_inner"
    pretty_name: "double_string_inner"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "double_string_content"
    pretty_name: "double_string_content"
    attr:
      * { type: "sel<true, double_string_inner, Exp>", required: true, name: "content" }
  }
  * {
    type: "node"
    decl_name: "DoubleString"
    pretty_name: "double_string"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "list<false, double_string_content>", required: false, name: "segments" }
  }
  * {
    type: "node"
    decl_name: "String"
    pretty_name: "string"
    attr:
      * { type: "sel<true, DoubleString, SingleString, LuaString>", required: true, name: "str" }
  }
  * {
    type: "leaf"
    decl_name: "Metatable"
    pretty_name: "metatable"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Metamethod"
    pretty_name: "metamethod"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "DotChainItem"
    pretty_name: "dot_chain_item"
    attr:
      * { type: "sel<true, Name, Metatable, Metamethod>", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "ColonChainItem"
    pretty_name: "colon_chain_item"
    attr:
      * { type: "sel<true, LuaKeyword, Name, Metamethod>", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "Slice"
    pretty_name: "slice"
    attr:
      * { type: "sel<true, Exp, default_value>", required: true, name: "startValue" }
      * { type: "sel<true, Exp, default_value>", required: true, name: "stopValue" }
      * { type: "sel<true, Exp, default_value>", required: true, name: "stepValue" }
  }
  * {
    type: "node"
    decl_name: "Parens"
    pretty_name: "parens"
    attr:
      * { type: "Exp", required: true, name: "expr" }
  }
  * {
    type: "node"
    decl_name: "Invoke"
    pretty_name: "invoke"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<false, Exp, SingleString, DoubleString, LuaString, TableLit>", required: false, name: "args" }
  }
  * {
    type: "leaf"
    decl_name: "existential_op"
    pretty_name: "existential_op"
    attr: nil
  }
  * {
    type: "leaf"
    decl_name: "table_appending_op"
    pretty_name: "table_appending_op"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "ChainValue"
    pretty_name: "chain_value"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<true, Callable, Invoke, DotChainItem, ColonChainItem, Slice, Exp, String, InvokeArgs, existential_op, table_appending_op>", required: true, name: "items" }
  }
  * {
    type: "node"
    decl_name: "AssignableChain"
    pretty_name: "assignable_chain"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<true, Callable, Invoke, DotChainItem, ColonChainItem, Exp, String>", required: true, name: "items" }
  }
  * {
    type: "node"
    decl_name: "Value"
    pretty_name: "value"
    attr:
      * { type: "sel<true, SimpleValue, simple_table, ChainValue, String>", required: true, name: "item" }
  }
  * {
    type: "leaf"
    decl_name: "default_value"
    pretty_name: "default_value"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "SpreadExp"
    pretty_name: "spread_exp"
    attr:
      * { type: "Exp", required: true, name: "exp" }
  }
  * {
    type: "node"
    decl_name: "TableLit"
    pretty_name: "table_lit"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<false, variable_pair, normal_pair, SpreadExp, Exp, default_pair, meta_variable_pair, meta_normal_pair, meta_default_pair>", required: false, name: "values" }
  }
  * {
    type: "node"
    decl_name: "TableBlockIndent"
    pretty_name: "table_block_indent"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<false, variable_pair, normal_pair, TableBlockIndent, default_pair, meta_variable_pair, meta_normal_pair, meta_default_pair>", required: false, name: "values" }
  }
  * {
    type: "node"
    decl_name: "TableBlock"
    pretty_name: "table_block"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<false, variable_pair, normal_pair, TableBlockIndent, Exp, TableBlock, SpreadExp, default_pair>", required: false, name: "values" }
  }
  * {
    type: "node"
    decl_name: "class_member_list"
    pretty_name: "class_member_list"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<true, variable_pair, normal_pair>", required: true, name: "values" }
  }
  * {
    type: "node"
    decl_name: "ClassBlock"
    pretty_name: "class_block"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<true, class_member_list, Statement>", required: true, name: "contents" }
  }
  * {
    type: "node"
    decl_name: "ClassDecl"
    pretty_name: "class_decl"
    attr:
      * { type: "Assignable", required: false, name: "name" }
      * { type: "Exp", required: false, name: "extend" }
      * { type: "ExpList", required: false, name: "mixes" }
      * { type: "ClassBlock", required: false, name: "body" }
  }
  * {
    type: "node"
    decl_name: "global_values"
    pretty_name: "global_values"
    attr:
      * { type: "NameList", required: true, name: "nameList" }
      * { type: "sel<false, TableBlock, ExpListLow>", required: false, name: "valueList" }
  }
  * {
    type: "leaf"
    decl_name: "global_op"
    pretty_name: "global_op"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Global"
    pretty_name: "global"
    attr:
      * { type: "sel<true, ClassDecl, global_op, global_values>", required: true, name: "item" }
  }
  * {
    type: "leaf"
    decl_name: "export_default"
    pretty_name: "export_default"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Export"
    pretty_name: "export"
    attr:
      * { type: "export_default", required: false, name: "def" }
      * { type: "sel<true, ExpList, Exp, Macro>", required: true, name: "target" }
      * { type: "Assign", required: false, name: "assign" }
  }
  * {
    type: "node"
    decl_name: "FnArgDef"
    pretty_name: "fn_arg_def"
    attr:
      * { type: "sel<true, Variable, SelfName>", required: true, name: "name" }
      * { type: "existential_op", required: false, name: "op" }
      * { type: "Exp", required: false, name: "defaultValue" }
  }
  * {
    type: "node"
    decl_name: "FnArgDefList"
    pretty_name: "fn_arg_def_list"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "list<false, FnArgDef>", required: false, name: "definitions" }
      * { type: "VarArg", required: false, name: "varArg" }
  }
  * {
    type: "node"
    decl_name: "outer_var_shadow"
    pretty_name: "outer_var_shadow"
    attr:
      * { type: "NameList", required: false, name: "varList" }
  }
  * {
    type: "node"
    decl_name: "FnArgsDef"
    pretty_name: "fn_args_def"
    attr:
      * { type: "FnArgDefList", required: false, name: "defList" }
      * { type: "outer_var_shadow", required: false, name: "shadowOption" }
  }
  * {
    type: "leaf"
    decl_name: "fn_arrow"
    pretty_name: "fn_arrow"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "FunLit"
    pretty_name: "fun_lit"
    attr:
      * { type: "FnArgsDef", required: false, name: "argsDef" }
      * { type: "fn_arrow", required: true, name: "arrow" }
      * { type: "Body", required: false, name: "body" }
  }
  * {
    type: "node"
    decl_name: "MacroName"
    pretty_name: "macro_name"
    attr:
      * { type: "Name", required: true, name: "name" }
  }
  * {
    type: "node"
    decl_name: "MacroLit"
    pretty_name: "macro_lit"
    attr:
      * { type: "FnArgDefList", required: false, name: "argsDef" }
      * { type: "Body", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "MacroInPlace"
    pretty_name: "macro_in_place"
    attr:
      * { type: "Body", required: true, name: "body" }
  }
  * {
    type: "node"
    decl_name: "Macro"
    pretty_name: "macro"
    attr:
      * { type: "Name", required: true, name: "name" }
      * { type: "MacroLit", required: true, name: "macroLit" }
  }
  * {
    type: "node"
    decl_name: "NameOrDestructure"
    pretty_name: "name_or_des"
    attr:
      * { type: "sel<true, Variable, TableLit>", required: true, name: "item" }
  }
  * {
    type: "node"
    decl_name: "AssignableNameList"
    pretty_name: "assignable_name_list"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "list<true, NameOrDestructure>", required: true, name: "items" }
  }
  * {
    type: "node"
    decl_name: "InvokeArgs"
    pretty_name: "invoke_args"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "sel_list<true, Exp, TableBlock>", required: true, name: "args" }
  }
  * {
    type: "leaf"
    decl_name: "const_value"
    pretty_name: "const_value"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "unary_value"
    pretty_name: "unary_value"
    attr:
      * { type: "list<true, unary_operator>", required: true, name: "ops" }
      * { type: "Value", required: true, name: "value" }
  }
  * {
    type: "node"
    decl_name: "unary_exp"
    pretty_name: "unary_exp"
    attr:
      * { type: "list<false, unary_operator>", required: false, name: "ops" }
      * { type: "list<true, Value>", required: true, name: "expos" }
  }
  * {
    type: "node"
    decl_name: "ExpListAssign"
    pretty_name: "exp_list_assign"
    attr:
      * { type: "ExpList", required: true, name: "expList" }
      * { type: "sel<false, Update, Assign>", required: false, name: "action" }
  }
  * {
    type: "node"
    decl_name: "if_line"
    pretty_name: "if_line"
    attr:
      * { type: "IfType", required: true, name: "type" }
      * { type: "IfCond", required: true, name: "condition" }
  }
  * {
    type: "leaf"
    decl_name: "BreakLoop"
    pretty_name: "break_loop"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "PipeBody"
    pretty_name: "pipe_body"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "list<true, unary_exp>", required: true, name: "values" }
  }
  * {
    type: "node"
    decl_name: "statement_appendix"
    pretty_name: "statement_appendix"
    attr:
      * { type: "sel<true, if_line, CompInner>", required: true, name: "item" }
  }
  * {
    type: "leaf"
    decl_name: "statement_sep"
    pretty_name: "statement_sep"
    attr: nil
  }
  * {
    type: "node"
    decl_name: "Statement"
    pretty_name: "statement"
    attr:
      * { type: "sel<true, Import, While, Repeat, For, ForEach, Return, Local, Global, Export, Macro, MacroInPlace, BreakLoop, Label, Goto, Backcall, LocalAttrib, PipeBody, ExpListAssign>", required: true, name: "content" }
      * { type: "statement_appendix", required: false, name: "appendix" }
      * { type: "statement_sep", required: false, name: "needSep" }
  }
  * {
    type: "node"
    decl_name: "Body"
    pretty_name: "body"
    attr:
      * { type: "sel<true, Block, Statement>", required: true, name: "content" }
  }
  * {
    type: "node"
    decl_name: "Block"
    pretty_name: "block"
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { type: "list<false, Statement>", required: false, name: "statements" }
  }
  * {
    type: "node"
    decl_name: "BlockEnd"
    pretty_name: "block_end"
    attr:
      * { type: "Block", required: true, name: "block" }
  }
  * {
    type: "node"
    decl_name: "File"
    pretty_name: "file"
    attr:
      * { type: "Block", required: false, name: "block" }
  }

export default types
