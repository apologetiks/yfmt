import "http.request" as request
import "inspect" as inspect

ast_h = "https://raw.githubusercontent.com/pigpigyyy/Yuescript/main/src/yuescript/yue_ast.h"
tobool =
  ["true"]: true
  ["false"]: false

get = ->
  req = request.new_from_uri ast_h

  hd, stream = req\go 10
  unless hd
    error "request failed"

  b, err = stream\get_body_as_string!
  unless b
    error "failed to fetch yue_ast.h: #{ err }"

  b

chop_t = (names) ->
  names\gsub "([%w_]+)_t", "%1"

parse_h = (h) ->
  types = {}

  stack = {}
  for ln in h\gmatch "([^\n]*)\n?"
    -- there's definitely a better way to do this, but i am _quite_ lazy

    pname = ln\match "^AST_END%([%w_]+, \"([%w_]+)\"sv%)$"
    if pname -- end stack
      stack.pretty_name = pname
      types[] = stack
      stack = nil
      continue
    
    -- node type
    decl = ln\match "^AST_NODE%(([%w_]+)%)$"
    if decl -- new stack
      stack =
        type: "node"
        decl_name: decl
        attr: {}

      continue

    -- leaf type
    decl = ln\match "^AST_LEAF%(([%w_]+)%)$"
    if decl -- new stack
      stack =
        type: "leaf"
        decl_name: decl
        attr: {}

      continue

    -- ast_ptr, ast_sel, ast_list are all important!
    required, ptr_t, name = ln\match "^%s+ast_ptr<([%w_]+), ([%w_]+)> ([%w_]+);$"
    if required and ptr_t and name
      stack.attr[] =
        type: chop_t ptr_t
        required: tobool[required]
        :name

      continue

    required, sel_ts, name = ln\match "^%s+ast_sel<([%w_]+),%s+([%w_,%s]+)> ([%w_]+);$"
    if required and sel_ts and name
      stack.attr[] =
        type: chop_t "sel<#{ required }, #{ sel_ts }>"
        required: tobool[required]
        :name

      continue

    -- this actually won't work and requires a bit more thought.
    -- some of the ast_sel_list decls are split over multiple lines.
    required, sel_t_l, name = ln\match "^%s+ast_sel_list<([%w_]+),%s+(.+)> ([%w_]+);$"
    if required and sel_t_l and name
      stack.attr[] =
        type: chop_t "sel_list<#{ required }, #{ sel_t_l }>"
        required: tobool[required]
        :name

      continue

    required, list_t, name = ln\match "^%s+ast_list<([%w_]+),%s+(.+)> ([%w_]+);$"
    if required and list_t and name
      stack.attr[] =
        type: chop_t "list<#{ required }, #{ list_t }>"
        required: tobool[required]
        :name
      continue

    --[[
    -- other attributes
    names = ln\match "^%s+AST_MEMBER%([%w_]+, (.+)%)$"
    if names
      -- clean up a bit
      for n in names\gmatch "&?([%w_]+),?%s?"
        stack.attr[] = n
      continue
    ]]

  types

-- manual handling for now of multiline nodes
manual_overrides =
  SimpleValue:
    attr:
      * { required: true, name: "value", type: "sel<true, If, Switch, With, ClassDecl, ForEach, For, While, Do, Try, unary_value, TblComprehension, TableLit, Comprehension, FunLit, Num>" }
  TableLit:
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { required: false, name: "values", type: "sel_list<false, variable_pair, normal_pair, SpreadExp, Exp, default_pair, meta_variable_pair, meta_normal_pair, meta_default_pair>" }
  TableBlockIndent:
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { required: false, name: "values", type: "sel_list<false, variable_pair, normal_pair, TableBlockIndent, default_pair, meta_variable_pair, meta_normal_pair, meta_default_pair>" }
  TableBlock:
    attr:
      * { type: "Seperator", required: true, name: "sep" }
      * { required: false, name: "values", type: "sel_list<false, variable_pair, normal_pair, TableBlockIndent, Exp, TableBlock, SpreadExp, default_pair>" }
  Statement:
    attr:
      * { required: true, name: "content", type: "sel<true, Import, While, Repeat, For, ForEach, Return, Local, Global, Export, Macro, MacroInPlace, BreakLoop, Label, Goto, Backcall, LocalAttrib, PipeBody, ExpListAssign>" }
      * { type: "statement_appendix", required: false, name: "appendix" }
      * { type: "statement_sep", required: false, name: "needSep" }

types = parse_h get!
print "types ="
for v in *types
  if manual_overrides[v.decl_name]
    v.attr = manual_overrides[v.decl_name].attr

  attr = {}
  for a in *v.attr
    --as_lua = inspect a, { newline: "", indent: "" }
    --as_lua = as_lua\gsub '"', '\\"'

    attr[] = "      * { type: #{ inspect a.type }, required: #{ a.required }, name: #{ inspect a.name } }"

  unless #attr > 0
    attr = " nil"
  else
    attr = "\n" .. (table.concat attr, "\n")

  print "  * {\n" ..
        "    type: \"#{ v.type }\"\n" ..
        "    decl_name: \"#{ v.decl_name }\"\n" ..
        "    pretty_name: \"#{ v.pretty_name }\"\n" ..
        "    attr:#{ attr }\n" ..
        "  }"
print ""
print "export default types"
