import "http.request" as request
import "inspect" as inspect

ast_h = "https://raw.githubusercontent.com/pigpigyyy/Yuescript/main/src/yuescript/yue_ast.h"

get = ->
  req = request.new_from_uri ast_h

  hd, stream = req\go 10
  unless hd
    error "request failed"

  b, err = stream\get_body_as_string!
  unless b
    error "failed to fetch yue_ast.h: #{ err }"

  b

parse_h = (h) ->
  types = {}

  stack = {}
  for ln in h\gmatch "([^\n]*)\n?"
    -- there's definitely a better way to do this, but i am _quite_ lazy

    pname = ln\match "^AST_END%([%w_]+, \"([%w_]+)\"sv%)$"
    if pname -- end stack
      stack.pretty_name = pname
      types[] = stack
      stack = nil
      continue
    
    -- node type
    decl = ln\match "^AST_NODE%(([%w_]+)%)$"
    if decl -- new stack
      stack =
        type: "node"
        decl_name: decl
        attr: {}

      continue

    -- leaf type
    decl = ln\match "^AST_LEAF%(([%w_]+)%)$"
    if decl -- new stack
      stack =
        type: "leaf"
        decl_name: decl
        attr: {}

      continue

    -- other attributes
    names = ln\match "^%s+AST_MEMBER%([%w_]+, (.+)%)$"
    if names
      -- clean up a bit
      for n in names\gmatch "&?([%w_]+),?%s?"
        stack.attr[] = n
      continue

  types

types = parse_h get!
print "types ="
for v in *types
  print "  * {\n" ..
        "    type: \"#{ v.type }\"\n" ..
        "    decl_name: \"#{ v.decl_name }\"\n" ..
        "    pretty_name: \"#{ v.pretty_name }\"\n" ..
        "    attr: #{ inspect v.attr }\n" ..
        "  }"
print ""
print "export default types"
